#version 400 core

// kriegt einen 2D-Vektor als Position des Punktes als Input übergeben
in vec2 position;

// gibt einen 3D-Vektor (die Richtung des Strahls durch den Pixel von der Kamera aus) an den Fragment-Shader weiter
out vec3 pass_direction;

uniform mat3 viewDirection;
uniform float screenRatio;
uniform float fov;

void main(void){
	
	// setzt die Position des Punktes auf dem Bildschirm auf das Positions-Input
	gl_Position = vec4(position,0,1);
	
	// setzt die Richtung, die an den Fragment-Shader weitergegeben wird, auf den Vektor (position.x,position.y,1),
	// d.h. man kuckt in Richtung der positiven Z-Achse mit einem FOV von 90 Grad
	pass_direction = vec3(position,1);
	pass_direction.xy *= fov*sqrt(vec2(screenRatio,1/screenRatio));
	
	// multipliziert die Richtung mit der Richtungsmatrix der Kamera, damit man in die richtige Richtung kuckt
	pass_direction = viewDirection*pass_direction;
	
}